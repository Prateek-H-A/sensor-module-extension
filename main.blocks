<xml xmlns="https://developers.google.com/blockly/xml"><block type="pxt-on-start" id=";qk5L-|mgC^l68Kf|ay{" x="0" y="0"><statement name="HANDLER"><block type="typescript_statement" id=".egu;H@kd@Bx=;,nX%.[" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ModuleWorld_Digital {" line1="" line2="    export enum mwDigitalNum {" line3="        //% blockId=&quot;P0P1&quot; block=&quot;P0P1&quot;" line4="        P0P1 = 1," line5="        //% blockId=&quot;P2P3&quot; block=&quot;P2P3&quot;" line6="        P2P3 = 2," line7="        //% blockId=&quot;P3P4&quot; block=&quot;P3P4&quot;" line8="        P3P4 = 3," line9="        //% blockId=&quot;P4P5&quot; block=&quot;P4P5&quot;" line10="        P4P5 = 4," line11="        //% blockId=&quot;P6P7&quot; block=&quot;P6P7&quot;" line12="        P6P7 = 5," line13="        //% blockId=&quot;P8P9&quot; block=&quot;P8P9&quot;" line14="        P8P9 = 6," line15="        //% blockId=&quot;P10P11&quot; block=&quot;P10P11&quot;" line16="        P10P11 = 7," line17="        //% blockId=&quot;P12P13&quot; block=&quot;P12P13&quot;" line18="        P12P13 = 8," line19="        //% blockId=&quot;P14P15&quot; block=&quot;P14P15&quot;" line20="        P14P15 = 9," line21="        //% blockId=&quot;P1P10&quot; block=&quot;P1P10&quot;" line22="        P1P10 = 10" line23="    }" line24="" line25="" line26="    export enum enObstacle {" line27="        //% blockId=&quot;Obstacle&quot; block=&quot;Obstacle&quot;" line28="        Obstacle = 0," line29="        //% blockId=&quot;NoObstacle&quot; block=&quot;NoObstacle&quot;" line30="        NoObstacle = 1" line31="    }" line32="" line33="    export enum enPIR {" line34="        //% blockId=&quot;NoPIR&quot; block=&quot;NoPIR&quot;" line35="        NoPIR = 0," line36="        //% blockId=&quot;OPIR&quot; block=&quot;OPIR&quot;" line37="        OPIR = 1" line38="    }" line39="" line40="    export enum enCollision {" line41="        //% blockId=&quot;NoCollision&quot; block=&quot;NoCollision&quot;" line42="        NoCollision = 0," line43="        //% blockId=&quot;OCollision&quot; block=&quot;OCollision&quot;" line44="        OCollision = 1" line45="    }" line46="" line47="    export enum enVibration {" line48="        //% blockId=&quot;NoVibration&quot; block=&quot;NoVibration&quot;" line49="        NoVibration = 0," line50="        //% blockId=&quot;OVibration&quot; block=&quot;OVibration&quot;" line51="        OVibration = 1" line52="    }" line53="" line54="    export enum DHT11Type {" line55="        //% block=&quot;temperature(℃)&quot; enumval=0" line56="        DHT11_temperature_C," line57="" line58="        //% block=&quot;temperature(℉)&quot; enumval=1" line59="        DHT11_temperature_F," line60="" line61="        //% block=&quot;humidity(0~100)&quot; enumval=2" line62="        DHT11_humidity," line63="    }" line64="    export enum enButton {" line65="        //% blockId=&quot;Press&quot; block=&quot;Press&quot;" line66="        Press = 0," line67="        //% blockId=&quot;Realse&quot; block=&quot;Realse&quot;" line68="        Realse = 1" line69="    }" line70="" line71="    //% blockId=&quot;readdht11&quot; block=&quot;value of dht11 %dht11type| at pin %value_DNum&quot;" line72="    //% weight=100" line73="    //% blockGap=20" line74="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5 " line75="    export function dht11value(dht11type: DHT11Type, value_DNum: mwDigitalNum): number {" line76="        let dht11pin;" line77="        if (value_DNum == 1) { dht11pin = DigitalPin.P0; }" line78="        else if (value_DNum == 2) { dht11pin = DigitalPin.P2; }" line79="        else if (value_DNum == 3) { dht11pin = DigitalPin.P3; }" line80="        else if (value_DNum == 4) { dht11pin = DigitalPin.P4; }" line81="        else if (value_DNum == 5) { dht11pin = DigitalPin.P6; }" line82="        else if (value_DNum == 6) { dht11pin = DigitalPin.P8; }" line83="        else if (value_DNum == 7) { dht11pin = DigitalPin.P10; }" line84="        else if (value_DNum == 8) { dht11pin = DigitalPin.P12; }" line85="        else if (value_DNum == 9) { dht11pin = DigitalPin.P14; }" line86="        else if (value_DNum == 10) { dht11pin = DigitalPin.P1; }" line87="" line88="        pins.digitalWritePin(dht11pin, 0)" line89="        basic.pause(18)" line90="        let i = pins.digitalReadPin(dht11pin)" line91="        pins.setPull(dht11pin, PinPullMode.PullUp);" line92="        switch (dht11type) {" line93="            case 0:" line94="                let dhtvalue1 = 0;" line95="                let dhtcounter1 = 0;" line96="                let dhtcounter1d = 0;" line97="                while (pins.digitalReadPin(dht11pin) == 1);" line98="                while (pins.digitalReadPin(dht11pin) == 0);" line99="                while (pins.digitalReadPin(dht11pin) == 1);" line100="                for (let j = 0; j &lt;= 32 - 1; j++) {" line101="                    dhtcounter1d = 0" line102="                    while (pins.digitalReadPin(dht11pin) == 0) {" line103="                        dhtcounter1d += 1;" line104="                    }" line105="                    dhtcounter1 = 0" line106="                    while (pins.digitalReadPin(dht11pin) == 1) {" line107="                        dhtcounter1 += 1;" line108="                    }" line109="                    if (j &gt; 15) {" line110="                        if (dhtcounter1 &gt; dhtcounter1d) {" line111="                            dhtvalue1 = dhtvalue1 + (1 &lt;&lt; (31 - j));" line112="                        }" line113="                    }" line114="                }" line115="                return ((dhtvalue1 &amp; 0x0000ff00) &gt;&gt; 8);" line116="                break;" line117="            case 1:" line118="                while (pins.digitalReadPin(dht11pin) == 1);" line119="                while (pins.digitalReadPin(dht11pin) == 0);" line120="                while (pins.digitalReadPin(dht11pin) == 1);" line121="                let dhtvalue = 0;" line122="                let dhtcounter = 0;" line123="                let dhtcounterd = 0;" line124="                for (let k = 0; k &lt;= 32 - 1; k++) {" line125="                    dhtcounterd = 0" line126="                    while (pins.digitalReadPin(dht11pin) == 0) {" line127="                        dhtcounterd += 1;" line128="                    }" line129="                    dhtcounter = 0" line130="                    while (pins.digitalReadPin(dht11pin) == 1) {" line131="                        dhtcounter += 1;" line132="                    }" line133="                    if (k &gt; 15) {" line134="                        if (dhtcounter &gt; dhtcounterd) {" line135="                            dhtvalue = dhtvalue + (1 &lt;&lt; (31 - k));" line136="                        }" line137="                    }" line138="                }" line139="                return Math.round((((dhtvalue &amp; 0x0000ff00) &gt;&gt; 8) * 9 / 5) + 32);" line140="                break;" line141="            case 2:" line142="                while (pins.digitalReadPin(dht11pin) == 1);" line143="                while (pins.digitalReadPin(dht11pin) == 0);" line144="                while (pins.digitalReadPin(dht11pin) == 1);" line145="" line146="                let value = 0;" line147="                let counter = 0;" line148="                let counterd = 0;" line149="" line150="                for (let l = 0; l &lt;= 8 - 1; l++) {" line151="                    counterd = 0" line152="                    while (pins.digitalReadPin(dht11pin) == 0) {" line153="                        counterd += 1;" line154="                    }" line155="                    counter = 0" line156="                    while (pins.digitalReadPin(dht11pin) == 1) {" line157="                        counter += 1;" line158="                    }" line159="                    if (counter &gt; counterd) {" line160="                        value = value + (1 &lt;&lt; (7 - l));" line161="                    }" line162="                }" line163="                return value;" line164="            default:" line165="                return 0;" line166="        }" line167="    }" line168="" line169="" line170="    //% blockId=ModuleWorld_Digital_Ultrasonic block=&quot;Ultrasonic|pin %value_DNum&quot;" line171="    //% weight=97" line172="    //% blockGap=20" line173="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5" line174="    export function Ultrasonic(value_DNum: mwDigitalNum): number {" line175="        //send pulse" line176="        let Trig, Echo;" line177="        if (value_DNum == 1) { Trig = DigitalPin.P0; Echo = DigitalPin.P1; }" line178="        else if (value_DNum == 2) { Trig = DigitalPin.P2; Echo = DigitalPin.P3; }" line179="        else if (value_DNum == 3) { Trig = DigitalPin.P3; Echo = DigitalPin.P4; }" line180="        else if (value_DNum == 4) { Trig = DigitalPin.P4; Echo = DigitalPin.P5; }" line181="        else if (value_DNum == 5) { Trig = DigitalPin.P6; Echo = DigitalPin.P7; }" line182="        else if (value_DNum == 6) { Trig = DigitalPin.P8; Echo = DigitalPin.P9; }" line183="        else if (value_DNum == 7) { Trig = DigitalPin.P10; Echo = DigitalPin.P11; }" line184="        else if (value_DNum == 8) { Trig = DigitalPin.P12; Echo = DigitalPin.P13; }" line185="        else if (value_DNum == 9) { Trig = DigitalPin.P14; Echo = DigitalPin.P15; }" line186="        else if (value_DNum == 10) { Trig = DigitalPin.P1; Echo = DigitalPin.P10; }" line187="" line188="" line189="        pins.setPull(Trig, PinPullMode.PullNone);" line190="        pins.digitalWritePin(Trig, 0);" line191="        control.waitMicros(2);" line192="        pins.digitalWritePin(Trig, 1);" line193="        control.waitMicros(10);" line194="        pins.digitalWritePin(Trig, 0);" line195="" line196="        //read pulse, maximum distance=500cm" line197="        const d = pins.pulseIn(Echo, PulseValue.High, 500 * 58);" line198="" line199="        return Math.idiv(d, 58);" line200="    }" line201="" line202="    //% blockId=ModuleWorld_Digital_IR block=&quot;IR|pin %value_DNum|value %value&quot;" line203="    //% weight=96" line204="    //% blockGap=20" line205="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5" line206="    export function IR(value_DNum: mwDigitalNum, value: enObstacle): boolean {" line207="        let pin;" line208="        if (value_DNum == 1) { pin = DigitalPin.P0; }" line209="        else if (value_DNum == 2) { pin = DigitalPin.P2; }" line210="        else if (value_DNum == 3) { pin = DigitalPin.P3; }" line211="        else if (value_DNum == 4) { pin = DigitalPin.P4; }" line212="        else if (value_DNum == 5) { pin = DigitalPin.P6; }" line213="        else if (value_DNum == 6) { pin = DigitalPin.P8; }" line214="        else if (value_DNum == 7) { pin = DigitalPin.P10; }" line215="        else if (value_DNum == 8) { pin = DigitalPin.P12; }" line216="        else if (value_DNum == 9) { pin = DigitalPin.P14; }" line217="        else if (value_DNum == 10) { pin = DigitalPin.P1; }" line218="" line219="        pins.setPull(pin, PinPullMode.PullUp);" line220="        return pins.digitalReadPin(pin) == value;" line221="    }" line222="" line223="    //% blockId=ModuleWorld_Digital_PIR block=&quot;PIR|pin %value_DNum|value %value&quot;" line224="    //% weight=96" line225="    //% blockGap=20" line226="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5" line227="    export function PIR(value_DNum: mwDigitalNum, value: enPIR): boolean {" line228="        let pin2;" line229="        if (value_DNum == 1) { pin2 = DigitalPin.P0; }" line230="        else if (value_DNum == 2) { pin2 = DigitalPin.P2; }" line231="        else if (value_DNum == 3) { pin2 = DigitalPin.P3; }" line232="        else if (value_DNum == 4) { pin2 = DigitalPin.P4; }" line233="        else if (value_DNum == 5) { pin2 = DigitalPin.P6; }" line234="        else if (value_DNum == 6) { pin2 = DigitalPin.P8; }" line235="        else if (value_DNum == 7) { pin2 = DigitalPin.P10; }" line236="        else if (value_DNum == 8) { pin2 = DigitalPin.P12; }" line237="        else if (value_DNum == 9) { pin2 = DigitalPin.P14; }" line238="        else if (value_DNum == 10) { pin2 = DigitalPin.P1; }" line239="" line240="        pins.setPull(pin2, PinPullMode.PullDown);" line241="        pins.digitalWritePin(pin2, 1);" line242="        return pins.digitalReadPin(pin2) == value;" line243="    }" line244="" line245="    //% blockId=ModuleWorld_Digital_Collision block=&quot;Collision|pin %value_DNum|value %value&quot;" line246="    //% weight=3" line247="    //% blockGap=20" line248="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5" line249="    export function Collision(value_DNum: mwDigitalNum, value: enCollision): boolean {" line250="" line251="        let pin3;" line252="        if (value_DNum == 1) { pin3 = DigitalPin.P0; }" line253="        else if (value_DNum == 2) { pin3 = DigitalPin.P2; }" line254="        else if (value_DNum == 3) { pin3 = DigitalPin.P3; }" line255="        else if (value_DNum == 4) { pin3 = DigitalPin.P4; }" line256="        else if (value_DNum == 5) { pin3 = DigitalPin.P6; }" line257="        else if (value_DNum == 6) { pin3 = DigitalPin.P8; }" line258="        else if (value_DNum == 7) { pin3 = DigitalPin.P10; }" line259="        else if (value_DNum == 8) { pin3 = DigitalPin.P12; }" line260="        else if (value_DNum == 9) { pin3 = DigitalPin.P14; }" line261="        else if (value_DNum == 10) { pin3 = DigitalPin.P1; }" line262="" line263="        pins.setPull(pin3, PinPullMode.PullUp);" line264="        return pins.digitalReadPin(pin3) == value;" line265="    }" line266="" line267="    //% blockId=ModuleWorld_Digital_Button block=&quot;Button|pin %value_DNum|value %value&quot;" line268="    //% weight=3" line269="    //% blockGap=20" line270="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5" line271="    export function Button(value_DNum: mwDigitalNum, value: enButton): boolean {" line272="" line273="        let pin4;" line274="        if (value_DNum == 1) { pin4 = DigitalPin.P0; }" line275="        else if (value_DNum == 2) { pin4 = DigitalPin.P2; }" line276="        else if (value_DNum == 3) { pin4 = DigitalPin.P3; }" line277="        else if (value_DNum == 4) { pin4 = DigitalPin.P4; }" line278="        else if (value_DNum == 5) { pin4 = DigitalPin.P6; }" line279="        else if (value_DNum == 6) { pin4 = DigitalPin.P8; }" line280="        else if (value_DNum == 7) { pin4 = DigitalPin.P10; }" line281="        else if (value_DNum == 8) { pin4 = DigitalPin.P12; }" line282="        else if (value_DNum == 9) { pin4 = DigitalPin.P14; }" line283="        else if (value_DNum == 10) { pin4 = DigitalPin.P1; }" line284="" line285="        pins.setPull(pin4, PinPullMode.PullUp);" line286="        return pins.digitalReadPin(pin4) == value;" line287="    }" line288="    //% blockId=ModuleWorld_Digital_Vibration block=&quot;Vibration|pin %value_DNum|get &quot;" line289="    //% weight=1" line290="    //% blockGap=20" line291="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5" line292="    export function Vibration(value_DNum: mwDigitalNum, handle: () =&gt; void): void {" line293="        let pin5;" line294="        if (value_DNum == 1) { pin5 = DigitalPin.P0; }" line295="        else if (value_DNum == 2) { pin5 = DigitalPin.P2; }" line296="        else if (value_DNum == 3) { pin5 = DigitalPin.P3; }" line297="        else if (value_DNum == 4) { pin5 = DigitalPin.P4; }" line298="        else if (value_DNum == 5) { pin5 = DigitalPin.P6; }" line299="        else if (value_DNum == 6) { pin5 = DigitalPin.P8; }" line300="        else if (value_DNum == 7) { pin5 = DigitalPin.P10; }" line301="        else if (value_DNum == 8) { pin5 = DigitalPin.P12; }" line302="        else if (value_DNum == 9) { pin5 = DigitalPin.P14; }" line303="        else if (value_DNum == 10) { pin5 = DigitalPin.P1; }" line304="" line305="        pins.setPull(pin5, PinPullMode.PullUp);" line306="        pins.setEvents(pin5, PinEventType.Edge);" line307="        control.onEvent(pin5, DAL.MICROBIT_PIN_EVT_FALL, handle);" line308="    }" line309="" line310="" line311="}" numlines="312"></mutation><next><block type="typescript_statement" id="~nb%XD134rgf6i;mm8~." editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ModuleWorld_Analog {" line1="" line2="    export enum enRocker {" line3="        //% blockId=&quot;NoState&quot; block=&quot;NoState&quot;" line4="        NoState = 0," line5="        //% blockId=&quot;Up&quot; block=&quot;Up&quot;" line6="        Up," line7="        //% blockId=&quot;Down&quot; block=&quot;Down&quot;" line8="        Down," line9="        //% blockId=&quot;Left&quot; block=&quot;Left&quot;" line10="        Left," line11="        //% blockId=&quot;Right&quot; block=&quot;Right&quot;" line12="        Right" line13="    }" line14="" line15="    export enum mwAnalogNum {" line16="        //% blockId=&quot;P0P1&quot; block=&quot;P0P1&quot;" line17="        AP0P1 = 1," line18="        //% blockId=&quot;P2P3&quot; block=&quot;P2P3&quot;" line19="        AP2P3 = 2," line20="        //% blockId=&quot;P3P4&quot; block=&quot;P3P4&quot;" line21="        AP3P4 = 3" line22="    }" line23="" line24="    //% blockId=ModuleWorld_Anaglog_Light block=&quot;Light|pin %value_ANum&quot;" line25="    //% weight=100" line26="    //% blockGap=20" line27="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5 " line28="    export function Light(value_ANum: mwAnalogNum): number {" line29="        let lightpin;" line30="        let value2: number;" line31="        if (value_ANum == 1) { lightpin = AnalogPin.P0; }" line32="        else if (value_ANum == 2) { lightpin = AnalogPin.P2; }" line33="        else if (value_ANum == 3) { lightpin = AnalogPin.P3; }" line34="" line35="        value2 = 1024 - pins.analogReadPin(lightpin);" line36="        return value2;" line37="        //return 0;" line38="    }" line39="" line40="    //% blockId=ModuleWorld_Anaglog_Sound block=&quot;Sound|pin %value_ANum&quot;" line41="    //% weight=99" line42="    //% blockGap=20" line43="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5" line44="    export function Sound(value_ANum: mwAnalogNum): number {" line45="        let soundpin;" line46="        let value3: number;" line47="        if (value_ANum == 1) { soundpin = AnalogPin.P0; }" line48="        else if (value_ANum == 2) { soundpin = AnalogPin.P2; }" line49="        else if (value_ANum == 3) { soundpin = AnalogPin.P3; }" line50="" line51="        value3 = pins.analogReadPin(soundpin);" line52="        return value3;" line53="        //return 0;" line54="    }" line55="    //% blockId=ModuleWorld_Anaglog_Potentiometer block=&quot;Potentiometer|pin %value_ANum&quot;" line56="    //% weight=2" line57="    //% blockGap=20" line58="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOption.columns=5" line59="    export function Potentiometer(value_ANum: mwAnalogNum): number {" line60="        let pin6;" line61="        let value4: number;" line62="        if (value_ANum == 1) { pin6 = AnalogPin.P0; }" line63="        else if (value_ANum == 2) { pin6 = AnalogPin.P2; }" line64="        else if (value_ANum == 3) { pin6 = AnalogPin.P3; }" line65="" line66="        value4 = pins.analogReadPin(pin6);" line67="        return value4;" line68="    }" line69="" line70="    //% blockId=ModuleWorld_Anaglog_Rocker block=&quot;Rocker|pin %value_ANum|value %value&quot;" line71="    //% weight=1" line72="    //% blockGap=20" line73="    export function Rocker(value_ANum: mwAnalogNum, value: enRocker): boolean {" line74="" line75="        let pin1;" line76="        let pin22;" line77="" line78="        if (value_ANum == 1) { pin1 = AnalogPin.P0; pin22 = AnalogPin.P1; }" line79="        else if (value_ANum == 2) { pin1 = AnalogPin.P2; pin22 = AnalogPin.P3; }" line80="        else if (value_ANum == 3) { pin1 = AnalogPin.P3; pin22 = AnalogPin.P4; }" line81="" line82="        let x = pins.analogReadPin(pin1);" line83="        let y = pins.analogReadPin(pin22);" line84="" line85="        let now_state = enRocker.NoState;" line86="" line87="        if (x &lt; 100) // 左" line88="        {" line89="            now_state = enRocker.Left;" line90="        }" line91="        else if (x &gt; 700) //右" line92="        {" line93="            now_state = enRocker.Right;" line94="        }" line95="        else  // 上下" line96="        {" line97="            if (y &lt; 100) //下" line98="            {" line99="                now_state = enRocker.Down;" line100="            }" line101="            else if (y &gt; 700) //上" line102="            {" line103="                now_state = enRocker.Up;" line104="            }" line105="        }" line106="        return now_state == value;" line107="    }" line108="" line109="" line110="" line111="" line112="}" numlines="113"></mutation><next><block type="typescript_statement" id="5OH}tk`qZ)dJYHqx7f2^" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace ModuleWorld_PWM {" line1="" line2="    export enum enColor {" line3="        //% blockId=&quot;OFF&quot; block=&quot;OFF&quot;" line4="        OFF = 0," line5="        //% blockId=&quot;Red&quot; block=&quot;Red&quot;" line6="        Red," line7="        //% blockId=&quot;Green&quot; block=&quot;Green&quot;" line8="        Green," line9="        //% blockId=&quot;Blue&quot; block=&quot;Blue&quot;" line10="        Blue," line11="        //% blockId=&quot;White&quot; block=&quot;White&quot;" line12="        White," line13="        //% blockId=&quot;Cyan&quot; block=&quot;Cyan&quot;" line14="        Cyan," line15="        //% blockId=&quot;Pinkish&quot; block=&quot;Pinkish&quot;" line16="        Pinkish," line17="        //% blockId=&quot;Yellow&quot; block=&quot;Yellow&quot;" line18="        Yellow" line19="    }" line20="" line21="    export enum mwDigitalNum {" line22="        //% blockId=&quot;P0P1&quot; block=&quot;P0P1&quot;" line23="        P0P1 = 1," line24="        //% blockId=&quot;P2P3&quot; block=&quot;P2P3&quot;" line25="        P2P3 = 2," line26="        //% blockId=&quot;P3P4&quot; block=&quot;P3P4&quot;" line27="        P3P4 = 3," line28="        //% blockId=&quot;P4P5&quot; block=&quot;P4P5&quot;" line29="        P4P5 = 4," line30="        //% blockId=&quot;P6P7&quot; block=&quot;P6P7&quot;" line31="        P6P7 = 5," line32="        //% blockId=&quot;P8P9&quot; block=&quot;P8P9&quot;" line33="        P8P9 = 6," line34="        //% blockId=&quot;P10P11&quot; block=&quot;P10P11&quot;" line35="        P10P11 = 7," line36="        //% blockId=&quot;P12P13&quot; block=&quot;P12P13&quot;" line37="        P12P13 = 8," line38="        //% blockId=&quot;P14P15&quot; block=&quot;P14P15&quot;" line39="        P14P15 = 9," line40="        //% blockId=&quot;P1P10&quot; block=&quot;P1P10&quot;" line41="        P1P10 = 10" line42="    }" line43="" line44="    export enum mwServoNum {" line45="        //% blockId=&quot;P1&quot; block=&quot;P1&quot;" line46="        P1 = 1," line47="        //% blockId=&quot;P4&quot; block=&quot;P4&quot;" line48="        P4 = 2," line49="        //% blockId=&quot;P2&quot; block=&quot;P2&quot;" line50="        P2 = 3," line51="        //% blockId=&quot;P10&quot; block=&quot;P10&quot;" line52="        P10 = 4" line53="    }" line54="" line55="" line56="" line57="    //% blockId=ModuleWorld_PWM_BuzzerPin block=&quot;Set Buzzer Pin|%value_DNum&quot;" line58="    //% weight=99" line59="    //% blockGap=22" line60="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5" line61="    export function BuzzerPin(value_DNum: mwDigitalNum): void {" line62="        let pinb;" line63="        if (value_DNum == 1) { pinb = AnalogPin.P0 }" line64="        else if (value_DNum == 2) { pinb = AnalogPin.P2 }" line65="        else if (value_DNum == 3) { pinb = AnalogPin.P3 }" line66="        else if (value_DNum == 4) { pinb = AnalogPin.P4 }" line67="        else if (value_DNum == 5) { pinb = AnalogPin.P6 }" line68="        else if (value_DNum == 6) { pinb = AnalogPin.P8 }" line69="        else if (value_DNum == 7) { pinb = AnalogPin.P10 }" line70="        else if (value_DNum == 8) { pinb = AnalogPin.P12 }" line71="        else if (value_DNum == 9) { pinb = AnalogPin.P14 }" line72="        else if (value_DNum == 10) { pinb = AnalogPin.P1 }" line73="" line74="        pins.setAudioPin(pinb);" line75="    }" line76="    //% blockId=ModuleWorld_PWM_VibrationMot block=&quot;Vibration Motor|%value_DNum|speed %speed&quot;" line77="    //% weight=80" line78="    //% blockGap=22" line79="    //% speed.min=0 speed.max=1023" line80="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5" line81="    export function VibrationMot(value_DNum: mwDigitalNum, speed: number): void {" line82="" line83="        let pin7;" line84="        if (value_DNum == 1) { pin7 = AnalogPin.P0; }" line85="        else if (value_DNum == 2) { pin7 = AnalogPin.P2; }" line86="        else if (value_DNum == 3) { pin7 = AnalogPin.P3; }" line87="        else if (value_DNum == 4) { pin7 = AnalogPin.P4; }" line88="        else if (value_DNum == 5) { pin7 = AnalogPin.P6; }" line89="        else if (value_DNum == 6) { pin7 = AnalogPin.P8; }" line90="        else if (value_DNum == 7) { pin7 = AnalogPin.P10; }" line91="        else if (value_DNum == 8) { pin7 = AnalogPin.P12; }" line92="        else if (value_DNum == 9) { pin7 = AnalogPin.P14; }" line93="        else if (value_DNum == 10) { pin7 = AnalogPin.P1; }" line94="" line95="        pins.analogWritePin(pin7, speed);" line96="    }" line97="" line98="    //% blockId=ModuleWorld_PWM_RGB block=&quot;RGB|(P12P13P14)|value1 %value1|value2 %value2|value3 %value3&quot;" line99="    //% weight=2" line100="    //% blockGap=20" line101="    //% value1.min=0 value1.max=255 value2.min=0 value2.max=255 value3.min=0 value3.max=255" line102="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line103="    export function RGB(value1: number, value2: number, value3: number): void {" line104="" line105="        pins.analogWritePin(AnalogPin.P13, value1 * 1024 / 256);" line106="        pins.analogWritePin(AnalogPin.P14, value2 * 1024 / 256);" line107="        pins.analogWritePin(AnalogPin.P12, value3 * 1024 / 256);" line108="    }" line109="" line110="    //% blockId=ModuleWorld_PWM_RGB2 block=&quot;RGB|(P12P13P14)|value %value&quot;" line111="    //% weight=1" line112="    //% blockGap=20" line113="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=4" line114="    export function RGB2(value: enColor): void {" line115="        let pin12 = DigitalPin.P13;" line116="        let pin23 = DigitalPin.P14;" line117="        let pin32 = DigitalPin.P12;" line118="" line119="        switch (value) {" line120="            case enColor.OFF: {" line121="                pins.digitalWritePin(pin12, 0);" line122="                pins.digitalWritePin(pin23, 0);" line123="                pins.digitalWritePin(pin32, 0);" line124="                break;" line125="            }" line126="            case enColor.Red: {" line127="                pins.digitalWritePin(pin12, 1);" line128="                pins.digitalWritePin(pin23, 0);" line129="                pins.digitalWritePin(pin32, 0);" line130="                break;" line131="            }" line132="            case enColor.Green: {" line133="                pins.digitalWritePin(pin12, 0);" line134="                pins.digitalWritePin(pin23, 1);" line135="                pins.digitalWritePin(pin32, 0);" line136="                break;" line137="            }" line138="            case enColor.Blue: {" line139="                pins.digitalWritePin(pin12, 0);" line140="                pins.digitalWritePin(pin23, 0);" line141="                pins.digitalWritePin(pin32, 1);" line142="                break;" line143="            }" line144="            case enColor.White: {" line145="                pins.digitalWritePin(pin12, 1);" line146="                pins.digitalWritePin(pin23, 1);" line147="                pins.digitalWritePin(pin32, 1);" line148="                break;" line149="            }" line150="            case enColor.Cyan: {" line151="                pins.digitalWritePin(pin12, 0);" line152="                pins.digitalWritePin(pin23, 1);" line153="                pins.digitalWritePin(pin32, 1);" line154="                break;" line155="            }" line156="            case enColor.Pinkish: {" line157="                pins.digitalWritePin(pin12, 1);" line158="                pins.digitalWritePin(pin23, 0);" line159="                pins.digitalWritePin(pin32, 1);" line160="                break;" line161="            }" line162="            case enColor.Yellow: {" line163="                pins.digitalWritePin(pin12, 1);" line164="                pins.digitalWritePin(pin23, 1);" line165="                pins.digitalWritePin(pin32, 0);" line166="                break;" line167="            }" line168="        }" line169="    }" line170="" line171="    //% blockId=ModuleWorld_PWM_Servo block=&quot;Servo(360)|pin %ServoNum|value %value&quot;" line172="    //% weight=6" line173="    //% blockGap=20" line174="    //% value.min=0 value.max=360" line175="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5" line176="    export function Servo(ServoNum: mwServoNum, value: number): void {" line177="        let pin8;" line178="        if (ServoNum == 1) { pin8 = AnalogPin.P1; }" line179="        else if (ServoNum == 2) { pin8 = AnalogPin.P4; }" line180="        else if (ServoNum == 3) { pin8 = AnalogPin.P2; }" line181="        else if (ServoNum == 4) { pin8 = AnalogPin.P10; }" line182="" line183="        pins.servoSetPulse(pin8, Math.map(value, 0, 360, 500, 2500))" line184="    }" line185="" line186="    //% blockId=ModuleWorld_PWM_Servo2 block=&quot;Servo(270)|pin %ServoNum|value %value&quot;" line187="    //% weight=6" line188="    //% blockGap=20" line189="    //% value.min=0 value.max=270" line190="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5" line191="    export function Servo2(ServoNum: mwServoNum, value: number): void {" line192="        let pin9;" line193="        if (ServoNum == 1) { pin9 = AnalogPin.P1; }" line194="        else if (ServoNum == 2) { pin9 = AnalogPin.P4; }" line195="        else if (ServoNum == 3) { pin9 = AnalogPin.P2; }" line196="        else if (ServoNum == 4) { pin9 = AnalogPin.P10; }" line197="" line198="        pins.servoSetPulse(pin9, Math.map(value, 0, 270, 500, 2500))" line199="    }" line200="" line201="}" numlines="202"></mutation><next><block type="typescript_statement" id="~P=e(H,Kp?fhTf5`GzoS" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace GestureRecognition {" line1="" line2="    let Init_Register_Array = [" line3="        [0xEF, 0x00]," line4="        [0x37, 0x07]," line5="        [0x38, 0x17]," line6="        [0x39, 0x06]," line7="        [0x41, 0x00]," line8="        [0x42, 0x00]," line9="        [0x46, 0x2D]," line10="        [0x47, 0x0F]," line11="        [0x48, 0x3C]," line12="        [0x49, 0x00]," line13="        [0x4A, 0x1E]," line14="        [0x4C, 0x20]," line15="        [0x51, 0x10]," line16="        [0x5E, 0x10]," line17="        [0x60, 0x27]," line18="        [0x80, 0x42]," line19="        [0x81, 0x44]," line20="        [0x82, 0x04]," line21="        [0x8B, 0x01]," line22="        [0x90, 0x06]," line23="        [0x95, 0x0A]," line24="        [0x96, 0x0C]," line25="        [0x97, 0x05]," line26="        [0x9A, 0x14]," line27="        [0x9C, 0x3F]," line28="        [0xA5, 0x19]," line29="        [0xCC, 0x19]," line30="        [0xCD, 0x0B]," line31="        [0xCE, 0x13]," line32="        [0xCF, 0x64]," line33="        [0xD0, 0x21]," line34="        [0xEF, 0x01]," line35="        [0x02, 0x0F]," line36="        [0x03, 0x10]," line37="        [0x04, 0x02]," line38="        [0x25, 0x01]," line39="        [0x27, 0x39]," line40="        [0x28, 0x7F]," line41="        [0x29, 0x08]," line42="        [0x3E, 0xFF]," line43="        [0x5E, 0x3D]," line44="        [0x65, 0x96]," line45="        [0x67, 0x97]," line46="        [0x69, 0xCD]," line47="        [0x6A, 0x01]," line48="        [0x6D, 0x2C]," line49="        [0x6E, 0x01]," line50="        [0x72, 0x01]," line51="        [0x73, 0x35]," line52="        [0x74, 0x00]," line53="        [0x77, 0x01]]" line54="" line55="    let Init_PS_Array = [" line56="        [0xEF, 0x00]," line57="        [0x41, 0x00]," line58="        [0x42, 0x00]," line59="        [0x48, 0x3C]," line60="        [0x49, 0x00]," line61="        [0x51, 0x13]," line62="        [0x83, 0x20]," line63="        [0x84, 0x20]," line64="        [0x85, 0x00]," line65="        [0x86, 0x10]," line66="        [0x87, 0x00]," line67="        [0x88, 0x05]," line68="        [0x89, 0x18]," line69="        [0x8A, 0x10]," line70="        [0x9f, 0xf8]," line71="        [0x69, 0x96]," line72="        [0x6A, 0x02]," line73="        [0xEF, 0x01]," line74="        [0x01, 0x1E]," line75="        [0x02, 0x0F]," line76="        [0x03, 0x10]," line77="        [0x04, 0x02]," line78="        [0x41, 0x50]," line79="        [0x43, 0x34]," line80="        [0x65, 0xCE]," line81="        [0x66, 0x0B]," line82="        [0x67, 0xCE]," line83="        [0x68, 0x0B]," line84="        [0x69, 0xE9]," line85="        [0x6A, 0x05]," line86="        [0x6B, 0x50]," line87="        [0x6C, 0xC3]," line88="        [0x6D, 0x50]," line89="        [0x6E, 0xC3]," line90="        [0x74, 0x05]]" line91="" line92="    let Init_Gesture_Array = [" line93="        [0xEF, 0x00]," line94="        [0x41, 0x00]," line95="        [0x42, 0x00]," line96="        [0xEF, 0x00]," line97="        [0x48, 0x3C]," line98="        [0x49, 0x00]," line99="        [0x51, 0x10]," line100="        [0x83, 0x20]," line101="        [0x9F, 0xF9]," line102="        [0xEF, 0x01]," line103="        [0x01, 0x1E]," line104="        [0x02, 0x0F]," line105="        [0x03, 0x10]," line106="        [0x04, 0x02]," line107="        [0x41, 0x40]," line108="        [0x43, 0x30]," line109="        [0x65, 0x96]," line110="        [0x66, 0x00]," line111="        [0x67, 0x97]," line112="        [0x68, 0x01]," line113="        [0x69, 0xCD]," line114="        [0x6A, 0x01]," line115="        [0x6B, 0xB0]," line116="        [0x6C, 0x04]," line117="        [0x6D, 0x2C]," line118="        [0x6E, 0x01]," line119="        [0x74, 0x00]," line120="        [0xEF, 0x00]," line121="        [0x41, 0xFF]," line122="        [0x42, 0x01]]" line123="" line124="    const PAJ7620_ID = 0x73                   //手势识别模块地址" line125="    const PAJ7620_REGITER_BANK_SEL = 0xEF     //寄存器库选择" line126="" line127="    const PAJ7620_BANK0 = 0" line128="    const PAJ7620_BANK1 = 1" line129="" line130="    const GES_RIGHT_FLAG = 1" line131="    const GES_LEFT_FLAG = 2" line132="    const GES_UP_FLAG = 4" line133="    const GES_DOWN_FLAG = 8" line134="    const GES_FORWARD_FLAG = 16" line135="    const GES_BACKWARD_FLAG = 32" line136="    const GES_CLOCKWISE_FLAG = 64" line137="    const GES_COUNT_CLOCKWISE_FLAG = 128" line138="    const GES_WAVE_FLAG = 1" line139="" line140="" line141="" line142="    export enum Gesture_state {" line143="        //% blockId=&quot;right&quot; block=&quot;right&quot;" line144="        right = 1," line145="        //% blockId=&quot;left&quot; block=&quot;left&quot;  " line146="        left = 2," line147="        //% blockId=&quot;up&quot; block=&quot;up&quot;        " line148="        up = 4," line149="        //% blockId=&quot;down&quot; block=&quot;down&quot;        " line150="        down = 8," line151="        //% blockId=&quot;forward&quot; block=&quot;forward&quot;        " line152="        forward = 16," line153="        //% blockId=&quot;backward&quot; block=&quot;backward&quot;        " line154="        backward = 32," line155="        //% blockId=&quot;clockwise&quot; block=&quot;clockwise&quot;        " line156="        clockwise = 64," line157="        //% blockId=&quot;count_clockwise&quot; block=&quot;count_clockwise&quot;        " line158="        count_clockwise = 128," line159="        //% blockId=&quot;wave&quot; block=&quot;wave&quot;        " line160="        wave = 256" line161="    }" line162="" line163="" line164="    function GestureWriteReg(addr: number, cmd: number) {" line165="" line166="        let buf = pins.createBuffer(2);" line167="        buf[0] = addr;" line168="        buf[1] = cmd;" line169="        pins.i2cWriteBuffer(PAJ7620_ID, buf);" line170="    }" line171="" line172="    function GestureReadReg(addr: number): number {" line173="" line174="        let buf2 = pins.createBuffer(1);" line175="        buf2[0] = addr;" line176="        pins.i2cWriteBuffer(PAJ7620_ID, buf2);" line177="" line178="        let result = pins.i2cReadNumber(PAJ7620_ID, NumberFormat.UInt8LE, false);" line179="        return result;" line180="    }" line181="" line182="" line183="" line184="" line185="    function GestureSelectBank(bank: number): void {" line186="        switch (bank) {" line187="            case 0:" line188="                GestureWriteReg(PAJ7620_REGITER_BANK_SEL, PAJ7620_BANK0);" line189="                break;" line190="            case 1:" line191="                GestureWriteReg(PAJ7620_REGITER_BANK_SEL, PAJ7620_BANK1);" line192="                break;" line193="            default:" line194="                break;" line195="        }" line196="" line197="    }" line198="" line199="    //% blockId=&quot;GestureInit&quot; block=&quot;gesture init(success：0 failure：255)&quot;" line200="    export function GestureInit(): number {" line201="        basic.pause(800);//等待芯片稳定" line202="" line203="        /*GestureSelectBank(0);" line204="        GestureSelectBank(0);" line205="        if((GestureReadReg(0) != 0x20)||(GestureReadReg(1)!=0x76))" line206="        {" line207="            return 0xff;" line208="            " line209="        }*/" line210="        if (GestureReadReg(0) != 0x20) {" line211="            return 0xff;" line212="" line213="        }" line214="" line215="" line216="        for (let m = 0; m &lt; Init_Register_Array.length; m++) {" line217="            GestureWriteReg(Init_Register_Array[m][0], Init_Register_Array[m][1]);" line218="" line219="        }" line220="        GestureSelectBank(0);" line221="" line222="        for (let n = 0; n &lt; Init_Gesture_Array.length; n++) {" line223="            GestureWriteReg(Init_Gesture_Array[n][0], Init_Gesture_Array[n][1]);" line224="" line225="        }" line226="" line227="        return 0;" line228="" line229="    }" line230="" line231="    //% blockId=&quot;GetGesture&quot; block=&quot;get gesture&quot;" line232="    export function GetGesture(): number {" line233="" line234="        let date = GestureReadReg(0x43);" line235="" line236="        switch (date) {" line237="            case GES_RIGHT_FLAG:" line238="            case GES_LEFT_FLAG:" line239="            case GES_UP_FLAG:" line240="            case GES_DOWN_FLAG:" line241="            case GES_FORWARD_FLAG:" line242="            case GES_BACKWARD_FLAG:" line243="            case GES_CLOCKWISE_FLAG:" line244="            case GES_COUNT_CLOCKWISE_FLAG:" line245="                break;" line246="" line247="            default:" line248="                date = GestureReadReg(0x44);" line249="                if (date == GES_WAVE_FLAG) {" line250="                    return 256;" line251="                }" line252="                break;" line253="" line254="        }" line255="" line256="        return date;" line257="    }" line258="" line259="    //% blockId=&quot;SelectGesture&quot; block=&quot;select gesture is %state&quot;" line260="    export function SelectGesture(state: Gesture_state): number {" line261="" line262="        return state;" line263="    }" line264="}" numlines="265"></mutation><next><block type="typescript_statement" id="HngcG{sZ-l53t#vP}v7A" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace Module_World_Color {" line1="" line2="    const COLOR_ADD = 0X53;" line3="    const COLOR_REG = 0x00;" line4="    const COLOR_R = 0X10;" line5="    const COLOR_G = 0X0D;" line6="    const COLOR_B = 0x13;" line7="" line8="    let initialized = false;" line9="    let val_red = 0;" line10="    let val_green = 0;" line11="    let val_blue = 0;" line12="" line13="    export enum enGetRGB {" line14="        //% blockId=&quot;GetValueR&quot; block=&quot;GetValueR&quot;" line15="        GetValueR = 0," line16="        //% blockId=&quot;GetValueG&quot; block=&quot;GetValueG&quot;" line17="        GetValueG = 1," line18="        //% blockId=&quot;GetValueB&quot; block=&quot;GetValueB&quot;" line19="        GetValueB = 2" line20="    }" line21="" line22="    function i2cWriteData(addr: number, reg: number, value: number) {" line23="        let buf3 = pins.createBuffer(2);" line24="        buf3[0] = reg;" line25="        buf3[1] = value;" line26="        pins.i2cWriteBuffer(addr, buf3);" line27="    }" line28="" line29="    function setRegConfig(): void {" line30="        i2cWriteData(COLOR_ADD, COLOR_REG, 0X06);" line31="        i2cWriteData(COLOR_ADD, 0X04, 0X41);" line32="        i2cWriteData(COLOR_ADD, 0x05, 0x01);" line33="    }" line34="" line35="    function initColorI2C(): void {" line36="        setRegConfig();" line37="        initialized = true;" line38="    }" line39="" line40="    function GetRGB(): void {" line41="        let buff_R = pins.createBuffer(2);" line42="        let buff_G = pins.createBuffer(2);" line43="        let buff_B = pins.createBuffer(2);" line44="" line45="        pins.i2cWriteNumber(COLOR_ADD, COLOR_R, NumberFormat.UInt8BE);" line46="        buff_R = pins.i2cReadBuffer(COLOR_ADD, 2);" line47="" line48="        pins.i2cWriteNumber(COLOR_ADD, COLOR_G, NumberFormat.UInt8BE);" line49="        buff_G = pins.i2cReadBuffer(COLOR_ADD, 2);" line50="" line51="        pins.i2cWriteNumber(COLOR_ADD, COLOR_B, NumberFormat.UInt8BE);" line52="        buff_B = pins.i2cReadBuffer(COLOR_ADD, 2);" line53="" line54="        let Red = (buff_R[1] &amp; 0xff) &lt;&lt; 8 | (buff_R[0] &amp; 0xff);" line55="        let Green = (buff_G[1] &amp; 0xff) &lt;&lt; 8 | (buff_G[0] &amp; 0xff);" line56="        let Blue = (buff_B[1] &amp; 0xff) &lt;&lt; 8 | (buff_B[0] &amp; 0xff);" line57="" line58="        if (Red &gt; 4500) Red = 2300;" line59="        if (Green &gt; 7600) Green = 4600;" line60="        if (Blue &gt; 4600) Blue = 2700;" line61="" line62="        val_red = Math.map(Red, 0, 2300, 0, 255);" line63="        val_green = Math.map(Green, 0, 4600, 0, 255);" line64="        val_blue = Math.map(Blue, 0, 2700, 0, 255);" line65="" line66="        if (val_red &gt; 255) val_red = 255;" line67="        if (val_green &gt; 255) val_green = 255;" line68="        if (val_blue &gt; 255) val_blue = 255;" line69="" line70="        if (val_red == val_green &amp;&amp; val_red == val_blue) {" line71="            val_red = 255;" line72="            val_green = 255;" line73="            val_blue == 255;" line74="        }" line75="        else if (val_red &gt; val_green &amp;&amp; val_red &gt; val_blue) {" line76="            val_red = 255;" line77="            val_green /= 2;" line78="            val_blue /= 2;" line79="        }" line80="        else if (val_green &gt; val_red &amp;&amp; val_green &gt; val_blue) {" line81="            val_green = 255;" line82="            val_red /= 2;" line83="            val_blue /= 2;" line84="        }" line85="        else if (val_blue &gt; val_red &amp;&amp; val_blue &gt; val_green) {" line86="            val_blue = 255;" line87="            val_red /= 2;" line88="            val_green /= 2;" line89="        }" line90="    }" line91="" line92="    //% blockId=ModuleWorld_Sensor_GetRGBValue block=&quot;GetRGBValue|value %value&quot;" line93="    //% blockGap=20" line94="    //% weight=98" line95="    //% color=&quot;#0000cd&quot;" line96="    //% name.fieldEditor=&quot;gridpicker&quot; name.fieldOptions.columns=5" line97="    export function GetRGBValue(value: enGetRGB): number {" line98="        if (!initialized) {" line99="            initColorI2C();" line100="        }" line101="        GetRGB();" line102="        switch (value) {" line103="            case enGetRGB.GetValueR:" line104="                return val_red;" line105="            case enGetRGB.GetValueG:" line106="                return val_green;" line107="            case enGetRGB.GetValueB:" line108="                return val_blue;" line109="            default:" line110="                break;" line111="        }" line112="        return 0;" line113="    }" line114="" line115="}" numlines="116"></mutation><next><block type="typescript_statement" id="SwpxP:kI]X]w(t*@e]YR" editable="false"><mutation xmlns="http://www.w3.org/1999/xhtml" line0="namespace TM1650 {" line1="" line2="    let COMMAND_I2C_ADDRESS = 0x24" line3="    let DISPLAY_I2C_ADDRESS = 0x34" line4="    let _SEG = [0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7F, 0x6F, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71];" line5="" line6="    let TM1650_CDigits = [0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00," line7="        0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00, 0x00," line8="        0x00, 0x82, 0x21, 0x00, 0x00, 0x00, 0x00, 0x02, 0x39, 0x0F, 0x00, 0x00, 0x00, 0x40, 0x80, 0x00," line9="        0x3F, 0x06, 0x5B, 0x4F, 0x66, 0x6D, 0x7D, 0x07, 0x7f, 0x6f, 0x00, 0x00, 0x00, 0x48, 0x00, 0x53," line10="        0x00, 0x77, 0x7C, 0x39, 0x5E, 0x79, 0x71, 0x6F, 0x76, 0x06, 0x1E, 0x00, 0x38, 0x00, 0x54, 0x3F," line11="        0x73, 0x67, 0x50, 0x6D, 0x78, 0x3E, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x39, 0x00, 0x0F, 0x00, 0x08," line12="        0x63, 0x5F, 0x7C, 0x58, 0x5E, 0x7B, 0x71, 0x6F, 0x74, 0x02, 0x1E, 0x00, 0x06, 0x00, 0x54, 0x5C," line13="        0x73, 0x67, 0x50, 0x6D, 0x78, 0x1C, 0x00, 0x00, 0x00, 0x6E, 0x00, 0x39, 0x30, 0x0F, 0x00, 0x00" line14="    ];" line15="" line16="    let _intensity = 3" line17="    let dbuf = [0, 0, 0, 0]" line18="    let iPosition = &quot;&quot;" line19="" line20="    /**" line21="     * send command to display" line22="     * @param is command, eg: 0" line23="     */" line24="    function cmd(c: number) {" line25="        pins.i2cWriteNumber(COMMAND_I2C_ADDRESS, c, NumberFormat.Int8BE)" line26="    }" line27="" line28="    /**" line29="     * send data to display" line30="     * @param is data, eg: 0" line31="     */" line32="    function dat(bit: number, d: number) {" line33="        pins.i2cWriteNumber(DISPLAY_I2C_ADDRESS + (bit % 4), d, NumberFormat.Int8BE)" line34="    }" line35="" line36="    /**" line37="     * turn on display" line38="     */" line39="    //% blockId=&quot;TM650_ON&quot; block=&quot;turn on display&quot;" line40="    //% weight=50 blockGap=8" line41="    export function on() {" line42="        cmd(_intensity * 16 + 1)" line43="    }" line44="" line45="    /**" line46="     * turn off display" line47="     */" line48="    //% blockId=&quot;TM650_OFF&quot; block=&quot;turn off display&quot;" line49="    //% weight=50 blockGap=8" line50="    export function off() {" line51="        _intensity = 0" line52="        cmd(0)" line53="    }" line54="" line55="    /**" line56="     * clear display content" line57="     */" line58="    //% blockId=&quot;TM650_CLEAR&quot; block=&quot;clear display&quot;" line59="    //% weight=40 blockGap=8" line60="    export function clear() {" line61="        dat(0, 0)" line62="        dat(1, 0)" line63="        dat(2, 0)" line64="        dat(3, 0)" line65="        dbuf = [0, 0, 0, 0]" line66="    }" line67="" line68="    /**" line69="     * show a digital in given position" line70="     * @param digit is number (0-15) will be shown, eg: 1" line71="     * @param bit is position, eg: 0" line72="     */" line73="    //% blockId=&quot;TM650_DIGIT&quot; block=&quot;show digit %num|at %bit&quot;" line74="    //% weight=80 blockGap=8" line75="    //% num.max=15 num.min=0" line76="    export function digit(num: number, bit: number) {" line77="        dbuf[bit % 4] = _SEG[num % 16]" line78="        dat(bit, _SEG[num % 16])" line79="    }" line80="" line81="    /**" line82="     * show a number in display" line83="     * @param num is number will be shown, eg: 100" line84="     */" line85="    //% blockId=&quot;TM650_SHOW_NUMBER&quot; block=&quot;show number %num&quot;" line86="    //% weight=100 blockGap=8" line87="    export function showNumber(num: number) {" line88="        if (num &lt; 0) {" line89="            dat(0, 0x40) // '-'" line90="            num = -num" line91="        }" line92="        else" line93="            digit(Math.idiv(num, 1000) % 10, 0)" line94="        digit(num % 10, 3)" line95="        digit(Math.idiv(num, 10) % 10, 2)" line96="        digit(Math.idiv(num, 100) % 10, 1)" line97="    }" line98="" line99="" line100="    //% blockId=&quot;showSring&quot; block=&quot;show string %str&quot;" line101="    //% weight=100 blockGap=8" line102="    export function showSring(str: string) {" line103="        for (let o = 0; o &lt; 4; o++) {" line104="            let a = str.charCodeAt(o) &amp; 0x7F;" line105="            let dot = str.charCodeAt(o) &amp; 0x80;" line106="            dbuf[o] = TM1650_CDigits[a];" line107="            if (a) {" line108="                pins.i2cWriteNumber(DISPLAY_I2C_ADDRESS + o, dbuf[o] | dot, NumberFormat.Int8BE)" line109="            }" line110="            else {" line111="                break;" line112="            }" line113="" line114="        }" line115="    }" line116="" line117="" line118="    function displayRuning(str: string, del: number): number {" line119="        iPosition = str;" line120="        showSring(iPosition);" line121="        basic.pause(del);" line122="        let p = iPosition.length;" line123="" line124="        if (p &lt; 4) {" line125="            return 0;" line126="        }" line127="        else {" line128="            return (p - 4);" line129="        }" line130="" line131="    }" line132="" line133="    function displayRunningShift(): number {" line134="" line135="        if (iPosition.length &lt;= 4) {" line136="            return 0;" line137="" line138="        }" line139="        else {" line140="            iPosition = iPosition.substr(1, iPosition.length - 1);" line141="            showSring(iPosition);" line142="            return (iPosition.length - 4);" line143="        }" line144="" line145="    }" line146="" line147="    //% blockId=&quot;showRunging&quot; block=&quot;scroll display %str | rolling time(ms) %del&quot;" line148="    //% weight=90 blockGap=8" line149="    export function showRunging(str: string, del: number) {" line150="        if (displayRuning(str, del)) {" line151="            while (displayRunningShift()) {" line152="                basic.pause(del);" line153="            }" line154="" line155="        }" line156="" line157="" line158="    }" line159="" line160="" line161="" line162="    /**" line163="     * show a number in hex format" line164="     * @param num is number will be shown, eg: 123" line165="     */" line166="    //% blockId=&quot;TM650_SHOW_HEX_NUMBER&quot; block=&quot;show hex number %num&quot;" line167="    //% weight=90 blockGap=8" line168="    export function showHex(num: number) {" line169="        if (num &lt; 0) {" line170="            dat(0, 0x40) // '-'" line171="            num = -num" line172="        }" line173="        else" line174="            digit((num &gt;&gt; 12) % 16, 0)" line175="        digit(num % 16, 3)" line176="        digit((num &gt;&gt; 4) % 16, 2)" line177="        digit((num &gt;&gt; 8) % 16, 1)" line178="    }" line179="" line180="    /**" line181="     * show Dot Point in given position" line182="     * @param bit is positiion, eg: 0" line183="     * @param show is true/false, eg: true" line184="     */" line185="    //% blockId=&quot;TM650_SHOW_DP&quot; block=&quot;show dot point %bit|show %num&quot;" line186="    //% weight=80 blockGap=8" line187="    export function showDpAt(bit: number, show: boolean) {" line188="        if (show) dat(bit, dbuf[bit % 4] | 0x80)" line189="        else dat(bit, dbuf[bit % 4] &amp; 0x7F)" line190="    }" line191="" line192="    /**" line193="     * set display intensity" line194="     * @param dat is intensity of the display, eg: 3" line195="     */" line196="    //% blockId=&quot;TM650_INTENSITY&quot; block=&quot;set intensity %dat&quot;" line197="    //% weight=70 blockGap=8" line198="    export function setIntensity(dat: number) {" line199="        if ((dat &lt; 0) || (dat &gt; 8))" line200="            return;" line201="        if (dat == 0)" line202="            off()" line203="        else {" line204="            _intensity = dat" line205="            cmd((dat &lt;&lt; 4) | 0x01)" line206="        }" line207="    }" line208="" line209="    on();" line210="}" numlines="211"></mutation></block></next></block></next></block></next></block></next></block></next></block></statement></block></xml>